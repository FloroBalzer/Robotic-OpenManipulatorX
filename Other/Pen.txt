point_matrix = [];


start_pos = [5, 0, 8, 0.3];% format [x, y, z, sin(angle)]
end_pos = [15, 16.5, 8, 1/sqrt(2)]; % format [x, y, z, sin(angle)]
point_matrix = [point_matrix; start_pos, end_pos, 5, 1, 0, 0, 0];

[trajectory1, no_point1] = trajectory_path(point_matrix);

%% go up
point_matrix = [];

start_pos = [14, 14, 8, 1/sqrt(2)];% format [x, y, z, sin(angle)]
end_pos = [14, 14, 12, 1/sqrt(2)]; % format [x, y, z, sin(angle)] %edit x and y to cube position note that holes are at 2.5 grid
point_matrix = [point_matrix; start_pos, end_pos, 3, 1, 0, 0, 0];
[trajectory2, no_point2] = trajectory_path(point_matrix);

%% move to drawing board
point_matrix = [];

start_pos = [14, 14, 12, 1/sqrt(2)];% format [x, y, z, sin(angle)]
end_pos = [15, -7.5, 12, 1/sqrt(2)]; % format [x, y, z, sin(angle)] %edit x and y to cube position note that holes are at 2.5 grid
point_matrix = [point_matrix; start_pos, end_pos, 5, 1, 0, 0, 0];
[trajectory3, no_point3] = trajectory_path(point_matrix);


%% move down
point_matrix = [];

start_pos = [15, -7.5, 12, 1/sqrt(2)];% format [x, y, z, sin(angle)]
end_pos = [15, -7.5, 6.2, 1/sqrt(2)]; % format [x, y, z, sin(angle)] %edit x and y to cube position note that holes are at 2.5 grid
point_matrix = [point_matrix; start_pos, end_pos, 5, 1, 0, 0, 0];
[trajectory4, no_point4] = trajectory_path(point_matrix);
%% draw across 
point_matrix = [];

start_pos = [15, -7.5, 6.2, 1/sqrt(2)];% format [x, y, z, sin(angle)]
end_pos = [15, 7.5, 6.2, 1/sqrt(2)]; % format [x, y, z, sin(angle)] %edit x and y to cube position note that holes are at 2.5 grid
point_matrix = [point_matrix; start_pos, end_pos, 10, 1, 0, 0, 0];
[trajectory5, no_point5] = trajectory_path(point_matrix);

%% draw diagonal 
point_matrix = [];

start_pos = [15, 7.5, 6.2, 1/sqrt(2)];% format [x, y, z, sin(angle)]
end_pos = [22.5, 0, 6.2, 1/sqrt(2)]; % format [x, y, z, sin(angle)] %edit x and y to cube position note that holes are at 2.5 grid
point_matrix = [point_matrix; start_pos, end_pos, 10, 1, 0, 0, 0];
[trajectory6, no_point6] = trajectory_path(point_matrix);

%% draw circle 
point_matrix = [];

start_pos = [22.5, 0, 6.2, 1/sqrt(2)];% format [x, y, z, sin(angle)]
end_pos = [15, -7.5, 6.2, 1/sqrt(2)]; % format [x, y, z, sin(angle)] %edit x and y to cube position note that holes are at 2.5 grid
point_matrix = [point_matrix; start_pos, end_pos, 10, 2, 15, 0, 6.2];
[trajectory7, no_point7] = trajectory_path(point_matrix);

%% return to home
point_matrix = [];

start_pos = [15, -7.5, 6.2, 1/sqrt(2)];% format [x, y, z, sin(angle)]
end_pos = [15, 0, 12, 1/sqrt(2)]; % format [x, y, z, sin(angle)] %edit x and y to cube position note that holes are at 2.5 grid
point_matrix = [point_matrix; start_pos, end_pos, 5, 1, 0, 0, 0];
[trajectory8, no_point8] = trajectory_path(point_matrix);



---------------------------------------------------------------------------------------------------------------------------------------------------------
write4ByteTxRx(port_num, protocol_version, dxl_15, addr_pro_goal_position, 100/0.088);
i=1;
while i<no_point1
write4ByteTxRx(port_num, protocol_version, dxl_11, addr_pro_goal_position, trajectory1(i,1)/0.088);
write4ByteTxRx(port_num, protocol_version, dxl_12, addr_pro_goal_position, trajectory1(i,2)/0.088);
write4ByteTxRx(port_num, protocol_version, dxl_13, addr_pro_goal_position, trajectory1(i,3)/0.088);
write4ByteTxRx(port_num, protocol_version, dxl_14, addr_pro_goal_position, trajectory1(i,4)/0.088);
i =i+1;
disp(i);
pause(0.4)
end

pause(1)
write4ByteTxRx(port_num, protocol_version, dxl_15, addr_pro_goal_position, 230/0.088);
pause(1)


i=1;
while i<no_point2
write4ByteTxRx(port_num, protocol_version, dxl_11, addr_pro_goal_position, trajectory2(i,1)/0.088);
write4ByteTxRx(port_num, protocol_version, dxl_12, addr_pro_goal_position, trajectory2(i,2)/0.088);
write4ByteTxRx(port_num, protocol_version, dxl_13, addr_pro_goal_position, trajectory2(i,3)/0.088);
write4ByteTxRx(port_num, protocol_version, dxl_14, addr_pro_goal_position, trajectory2(i,4)/0.088);
i =i+1;
disp(i);
pause(0.4)
end

i=1;
while i<no_point3
write4ByteTxRx(port_num, protocol_version, dxl_11, addr_pro_goal_position, trajectory3(i,1)/0.088);
write4ByteTxRx(port_num, protocol_version, dxl_12, addr_pro_goal_position, trajectory3(i,2)/0.088);
write4ByteTxRx(port_num, protocol_version, dxl_13, addr_pro_goal_position, trajectory3(i,3)/0.088);
write4ByteTxRx(port_num, protocol_version, dxl_14, addr_pro_goal_position, trajectory3(i,4)/0.088);
i =i+1;
disp(i);
pause(0.4)
end

i=1;
while i<no_point4
write4ByteTxRx(port_num, protocol_version, dxl_11, addr_pro_goal_position, trajectory4(i,1)/0.088);
write4ByteTxRx(port_num, protocol_version, dxl_12, addr_pro_goal_position, trajectory4(i,2)/0.088);
write4ByteTxRx(port_num, protocol_version, dxl_13, addr_pro_goal_position, trajectory4(i,3)/0.088);
write4ByteTxRx(port_num, protocol_version, dxl_14, addr_pro_goal_position, trajectory4(i,4)/0.088);
i =i+1;
disp(i);
pause(0.4)
end
pause(1)

i=1;
while i<no_point5
write4ByteTxRx(port_num, protocol_version, dxl_11, addr_pro_goal_position, trajectory5(i,1)/0.088);
write4ByteTxRx(port_num, protocol_version, dxl_12, addr_pro_goal_position, trajectory5(i,2)/0.088);
write4ByteTxRx(port_num, protocol_version, dxl_13, addr_pro_goal_position, trajectory5(i,3)/0.088);
write4ByteTxRx(port_num, protocol_version, dxl_14, addr_pro_goal_position, trajectory5(i,4)/0.088);
i =i+1;
disp(i);
pause(0.4)
end

pause(1)

i=1;
while i<no_point6
write4ByteTxRx(port_num, protocol_version, dxl_11, addr_pro_goal_position, trajectory6(i,1)/0.088);
write4ByteTxRx(port_num, protocol_version, dxl_12, addr_pro_goal_position, trajectory6(i,2)/0.088);
write4ByteTxRx(port_num, protocol_version, dxl_13, addr_pro_goal_position, trajectory6(i,3)/0.088);
write4ByteTxRx(port_num, protocol_version, dxl_14, addr_pro_goal_position, trajectory6(i,4)/0.088);
i =i+1;
disp(i);
pause(0.4)
end

pause(1)

i=1;
while i<no_point7
write4ByteTxRx(port_num, protocol_version, dxl_11, addr_pro_goal_position, trajectory7(i,1)/0.088);
write4ByteTxRx(port_num, protocol_version, dxl_12, addr_pro_goal_position, trajectory7(i,2)/0.088);
write4ByteTxRx(port_num, protocol_version, dxl_13, addr_pro_goal_position, trajectory7(i,3)/0.088);
write4ByteTxRx(port_num, protocol_version, dxl_14, addr_pro_goal_position, trajectory7(i,4)/0.088);
i =i+1;
disp(i);
pause(0.4)
end

pause(1)

i=1;
while i<no_point8
write4ByteTxRx(port_num, protocol_version, dxl_11, addr_pro_goal_position, trajectory8(i,1)/0.088);
write4ByteTxRx(port_num, protocol_version, dxl_12, addr_pro_goal_position, trajectory8(i,2)/0.088);
write4ByteTxRx(port_num, protocol_version, dxl_13, addr_pro_goal_position, trajectory8(i,3)/0.088);
write4ByteTxRx(port_num, protocol_version, dxl_14, addr_pro_goal_position, trajectory8(i,4)/0.088);
i =i+1;
disp(i);
pause(0.4)
end
